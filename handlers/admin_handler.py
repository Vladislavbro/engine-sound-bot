import logging
from aiogram import Router, F, types
from aiogram.filters import Command

from config import ADMIN_ID # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ID –∞–¥–º–∏–Ω–∞
from database import get_stats # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
from keyboards import stats_period_keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

admin_router = Router()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
# –í–∞–∂–Ω–æ: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å int(ADMIN_ID), —Ç.–∫. –∏–∑ config –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
# –•–æ—Ç—è –º—ã –≤ config.py —É–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏, –ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í config.py —É–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ int, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ ADMIN_ID
class AdminFilter:
    def __call__(self, message: types.Message | types.CallbackQuery) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ADMIN_ID –≤–æ–æ–±—â–µ –∑–∞–¥–∞–Ω
        if not ADMIN_ID:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É, –Ω–æ ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin = message.from_user.id == ADMIN_ID
        if not is_admin:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É.")
        return is_admin

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@admin_router.message(Command("stats"), AdminFilter())
async def cmd_stats(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=stats_period_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø—Ä–µ—Ñ–∏–∫—Å "stats:")
@admin_router.callback_query(F.data.startswith("stats:"), AdminFilter())
async def process_stats_period(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    period = callback.data.split(":")[1]
    user_id = callback.from_user.id
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥ '{period}'.")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats_data = get_stats(period)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    period_text = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "yesterday": "–í—á–µ—Ä–∞",
        "7days": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        "all": "–í—Å—ë –≤—Ä–µ–º—è"
    }.get(period, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

    avg_score = stats_data["average_score"]
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0.0, –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ä–∞–≤–µ–Ω 0
    avg_score_text = f"{avg_score:.1f}" if avg_score is not None else "-"

    response_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_text}**\n\n"
        f"‚ñ∂Ô∏è **–°—Ç–∞—Ä—Ç—ã –∏–≥—Ä—ã:**\n"
        f"  - –í—Å–µ–≥–æ: {stats_data['total_starts']}\n"
        f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {stats_data['unique_starters']}\n\n"
        f"üèÅ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:**\n"
        f"  - –í—Å–µ–≥–æ: {stats_data['total_finishes']}\n"
        f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {stats_data['unique_finishers']}\n\n"
        f"üèÜ **–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:** {avg_score_text}"
    )

    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏
        await callback.answer()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.edit_text(response_text, parse_mode="Markdown")
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–π:
        # await callback.message.answer(response_text, parse_mode="Markdown")
        # await callback.message.delete() # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True) 