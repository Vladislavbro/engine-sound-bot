# -*- coding: utf-8 -*-
import random # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç random
from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode # –î–æ–±–∞–≤–∏–ª ParseMode –¥–ª—è HTML –≤ quit_game

# TODO: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–æ—Å—Ç–æ—è–Ω–∏—è
# from data import ENGINES_DATA
# from keyboards import get_next_keyboard
# from states import GameState

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–æ—Å—Ç–æ—è–Ω–∏—è
from data import ENGINES_DATA, ENGINE_TYPES # –î–æ–±–∞–≤–∏–ª–∏ ENGINE_TYPES
from keyboards import get_play_again_keyboard # –£–±—Ä–∞–ª–∏ get_next_keyboard
from states import GameState
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
from handlers.game_handler import send_question

callback_router = Router() # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ in_game)
@callback_router.callback_query(F.data.startswith("answer:"), GameState.in_game)
async def process_answer_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "answer:–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–æ—Ç–≤–µ—Ç:–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç"
    _, selected_option, correct_answer_key = callback.data.split(":") # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –≤ key

    user_data = await state.get_data()
    current_score = user_data.get('score', 0)
    question_index = user_data.get('question_index', 0)
    question_list = user_data.get('questions', [])
    total_questions = len(question_list)
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids_to_delete = user_data.get('question_message_ids', [])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–æ—Ç–æ—Ä–µ
    engine_info = ENGINES_DATA[correct_answer_key]
    image = FSInputFile(engine_info["image_file"])
    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∑–≤—É–∫—É --- H
    correct_sound = FSInputFile(engine_info["sound_file"])
    # ----------------------------------------------------
    # --- –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è --- H
    display_name = engine_info.get("display_name", correct_answer_key) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ—Ç–æ—Ä–∞
    car_name = engine_info.get("car", "") # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã
    # -----------------------------------------
    result_message = ""

    if selected_option == correct_answer_key: # –ò—Å–ø–æ–ª—å–∑—É–µ–º key
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ) --- H
        result_message = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ {display_name} {car_name}."
        current_score += 1
        await state.update_data(score=current_score)
    else:
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ) --- H
        result_message = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –≠—Ç–æ –±—ã–ª {display_name} {car_name}."

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–ø—Ä–æ—Å–∞
    if callback.message:
        chat_id = callback.message.chat.id # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try:
            await callback.message.delete()
        except TelegramBadRequest as e:
            print(f"Error deleting callback message: {e}")
        for msg_id in message_ids_to_delete:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except TelegramBadRequest as e:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                print(f"Error deleting message {msg_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ó–í–£–ö
        await bot.send_message(chat_id, result_message)
        await bot.send_photo(chat_id, photo=image)
        await bot.send_voice(chat_id, voice=correct_sound)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if question_index >= total_questions:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await bot.send_message(
                chat_id,
                f"\n\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {current_score} –∏–∑ {total_questions} —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–æ—Ä–æ–≤.",
                reply_markup=get_play_again_keyboard()
            )
            await state.clear()
            await state.set_state(None)
        else:
            # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å --- H
            # –£–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É "–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É?" –∏ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ"
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å, send_question —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç GameState.in_game
            await send_question(chat_id, bot, state)
            # ----------------------------------------------------


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ù–∞—á–∞—Ç—å" / "–°—ã–≥—Ä–∞—Ç—å –µ—â–µ"
async def start_game_handler_local(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å' –∏–ª–∏ '–°—ã–≥—Ä–∞—Ç—å –µ—â–µ'."""
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    if callback.message:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–∞—á–∞—Ç—å –∏–ª–∏ –°—ã–≥—Ä–∞—Ç—å –µ—â–µ)
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest as e:
            print(f"Error editing message reply markup: {e}")

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç–∏–ø—ã –º–æ—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    shuffled_engines = random.sample(ENGINE_TYPES, len(ENGINE_TYPES))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(questions=shuffled_engines, score=0, question_index=0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    if callback.message:
        await send_question(callback.message.chat.id, bot, state)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data="start_game"
callback_router.callback_query.register(start_game_handler_local, F.data == "start_game")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
@callback_router.callback_query(F.data == "quit_game")
async def quit_game_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await callback.answer()
    if callback.message:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode=HTML –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üëã\n–ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –î–æ —Å–∫–æ—Ä–æ–≥–æ!", parse_mode=ParseMode.HTML)
    await state.clear() 